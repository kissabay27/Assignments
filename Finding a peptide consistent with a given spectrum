rna_codon = {'AAA' : 'K', 'AAC' : 'N', 'AAG' : 'K','AAU' : 'N','ACA' : 'T', 'ACC' : 'T', 'ACG' : 'T',
    'ACU' : 'T', 'AGA' : 'R', 'AGC' : 'S', 'AGG' : 'R', 'AGU' : 'S', 'AUA' : 'I', 'AUC' : 'I',
    'AUG' : 'M', 'AUU' : 'I', 'CAA' : 'Q' ,'CAC' : 'H', 'CAG' : 'Q', 'CAU' : 'H', 'CCA' : 'P',
    'CCC' : 'P', 'CCG' : 'P', 'CCU' : 'P', 'CGA' : 'R', 'CGC' : 'R', 'CGG' : 'R', 'CGU' : 'R',
    'CUA' : 'L', 'CUC' : 'L', 'CUG' : 'L', 'CUU' : 'L', 'GAA' : 'E', 'GAC' : 'D', 'GAG' : 'E',
    'GAU' : 'D', 'GCA' : 'A', 'GCC' : 'A', 'GCG' : 'A', 'GCU' : 'A', 'GGA' : 'G', 'GGC' : 'G',
    'GGG' : 'G', 'GGU' : 'G', 'GUA' : 'V', 'GUC' : 'V', 'GUG' : 'V', 'GUU' : 'V', 'UAA' : '-',
    'UAC' : 'Y', 'UAG' : '-', 'UAU' : 'Y', 'UCA' : 'S', 'UCC' : 'S', 'UCG' : 'S', 'UCU' : 'S',
    'UGA' : '-', 'UGC' : 'C', 'UGG' : 'W', 'UGU' : 'C', 'UUA' : 'L', 'UUC' : 'F', 'UUG' : 'L',
    'UUU' : 'F'}

amino_acid_mass = {'G' : 57, 'A' : 71, 'S' : 87, 'P' : 97, 'V' : 99, 'T' : 101, 'C' : 103,
    'I' : 113, 'L' : 113, 'N' : 114, 'D' : 115, 'K' : 128, 'Q' : 128, 'E' : 129,'M' : 131,
    'H' : 137, 'F' : 147, 'R' : 156, 'Y' : 163, 'W' : 186}

def protein_dna_count(s):
    count = 1
    for c in s:
        count *= sum(map(lambda e: e == c, rna_codon.values()))
    return count
    
#translating RNA text into peptide text
def protein_translation(s):
    global rna_codon
    it = (s[i:3+i] for i in range(0, len(s), 3))
    t = ''.join(map(lambda e: rna_codon.setdefault(e,''), it))
    return t


#finding substrings of a genome encoding a given amino acid sequence
def peptide_encoding(dna,peptide):
    seq = []
    def search_seq(text, reverse = False):
        ttext = protein_translation(text)
        for i in range(len(ttext) - len(peptide) + 1):
            if (ttext[i:i+len(peptide)] == peptide):
                substr = text[i*3:i*3+len(peptide)*3].replace('U', 'T')
                if reverse: substr = reverse_complement(substr)
                seq.append(substr)
    rna = dna.replace('T', 'U')
    rrna = reverse_complement(dna).replace('T', 'U')
    search_seq(rna)
    search_seq(rrna, reverse = True)  
    search_seq(rna[1:])
    search_seq(rrna[1:], reverse = True)        
    search_seq(rna[2:])    
    search_seq(rrna[2:], reverse = True)
    return seq
    

#converting peptite string to a list of masses
def peptide_masses(peptide):
    global amino_acid_mass
    return map(lambda k:amino_acid_mass[k],list(peptide))


#converting list of peptide masses to spectrum
def peptide_mass_spectrum(pmass, cyclic = True):
    s = [0, ]
    ll = list(pmass)    
    n = len(pmass)
    it = None
    if cyclic:
        ll.extend(pmass[:-1])
        s.append(sum(pmass))
        it = [(i,j) for i in range(n) for j in range (i+1,i+n)]
    else:
        it = [(i,j) for i in range(n) for j in range (i+1,n+1)]
        
    for (i,j) in it:
            subpeptide_mass = sum(ll[i:j])
            s.append(subpeptide_mass)
    
    return sorted(s)


#generating the theoretical spectrum of a cyclic peptide
def get_spectrum(peptide, cyclic = True):
    if (type(peptide) == str):
        return peptide_mass_spectrum(peptide_masses(peptide), cyclic)
    else:
        return peptide_mass_spectrum(peptide, cyclic)


#computing the number of peptides of given total mass
def counting_peptides_with_given_mass(mass):
    aam = sorted(list(set(amino_acid_mass.values())), reverse = True)
    md = {0:1}
    for i in range(min(aam), mass+1):
        for m in aam:
            if i-m in md:
                md[i] = md[i-m] + md.get(i,0)
    return md[mass]
    
    
#computing the number of subpeptides of a given peptide length
def linear_subpeptide_count(n):
    return 1 + (n+1)*n/2

def spectrum_consistent(p,s, cyclic = False):
    lsp = peptide_mass_spectrum(p, cyclic = cyclic)
    for i in lsp:
        if not i in s:
            return False
    return True

#finding all peptides consistent with a given spectrum
def cyclopeptide_sequencing(spectrum):
    lp = [[]]
    res =  []
    lmass = list(set(amino_acid_mass.values()))
    spectrum.sort(reverse = True)
    parent_mass = max(spectrum)
    def expand(a):
        exp = []
        for i in a:
            for j in lmass:
                p = list(i)
                p.append(j)
                exp.append(p)
        return exp
    while lp:
        lp = expand(lp)
        for p in list(lp):
            if sum(p) == parent_mass:
                if spectrum_consistent(p, spectrum, cyclic = True):
                    res.append(p)
                lp.remove(p)
            elif not spectrum_consistent(p, spectrum):
                lp.remove(p)
    return res 
get_spectrum("MIAT", cyclic = True)
